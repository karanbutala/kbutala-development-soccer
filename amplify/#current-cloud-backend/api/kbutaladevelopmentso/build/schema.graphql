type Attendees {
  id: ID!
  attendeeNo: Int!
  attendeeFirstName: String!
  attendeeLastName: String!
  attendeeContact: String!
  registrationTimestamp: AWSTimestamp!
  Games(filter: ModelAttendeesGamesFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelAttendeesGamesConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Games {
  id: ID!
  gameName: String!
  gameLocation: String!
  gameTimestamp: AWSTimestamp!
  gamePlayersCount: Int!
  attendeess(filter: ModelAttendeesGamesFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelAttendeesGamesConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type AttendeesGames {
  id: ID!
  attendeesId: ID!
  gamesId: ID!
  attendees: Attendees!
  games: Games!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelAttendeesConnection {
  items: [Attendees]!
  nextToken: String
}

input ModelAttendeesFilterInput {
  id: ModelIDInput
  attendeeNo: ModelIntInput
  attendeeFirstName: ModelStringInput
  attendeeLastName: ModelStringInput
  attendeeContact: ModelStringInput
  registrationTimestamp: ModelIntInput
  and: [ModelAttendeesFilterInput]
  or: [ModelAttendeesFilterInput]
  not: ModelAttendeesFilterInput
}

type Query {
  getAttendees(id: ID!): Attendees
  listAttendees(filter: ModelAttendeesFilterInput, limit: Int, nextToken: String): ModelAttendeesConnection
  getGames(id: ID!): Games
  listGames(filter: ModelGamesFilterInput, limit: Int, nextToken: String): ModelGamesConnection
  getAttendeesGames(id: ID!): AttendeesGames
  listAttendeesGames(filter: ModelAttendeesGamesFilterInput, limit: Int, nextToken: String): ModelAttendeesGamesConnection
  attendeesGamesByAttendeesId(attendeesId: ID!, sortDirection: ModelSortDirection, filter: ModelAttendeesGamesFilterInput, limit: Int, nextToken: String): ModelAttendeesGamesConnection
  attendeesGamesByGamesId(gamesId: ID!, sortDirection: ModelSortDirection, filter: ModelAttendeesGamesFilterInput, limit: Int, nextToken: String): ModelAttendeesGamesConnection
}

input ModelAttendeesConditionInput {
  attendeeNo: ModelIntInput
  attendeeFirstName: ModelStringInput
  attendeeLastName: ModelStringInput
  attendeeContact: ModelStringInput
  registrationTimestamp: ModelIntInput
  and: [ModelAttendeesConditionInput]
  or: [ModelAttendeesConditionInput]
  not: ModelAttendeesConditionInput
}

input CreateAttendeesInput {
  id: ID
  attendeeNo: Int!
  attendeeFirstName: String!
  attendeeLastName: String!
  attendeeContact: String!
  registrationTimestamp: AWSTimestamp!
}

input UpdateAttendeesInput {
  id: ID!
  attendeeNo: Int
  attendeeFirstName: String
  attendeeLastName: String
  attendeeContact: String
  registrationTimestamp: AWSTimestamp
}

input DeleteAttendeesInput {
  id: ID!
}

type Mutation {
  createAttendees(input: CreateAttendeesInput!, condition: ModelAttendeesConditionInput): Attendees
  updateAttendees(input: UpdateAttendeesInput!, condition: ModelAttendeesConditionInput): Attendees
  deleteAttendees(input: DeleteAttendeesInput!, condition: ModelAttendeesConditionInput): Attendees
  createGames(input: CreateGamesInput!, condition: ModelGamesConditionInput): Games
  updateGames(input: UpdateGamesInput!, condition: ModelGamesConditionInput): Games
  deleteGames(input: DeleteGamesInput!, condition: ModelGamesConditionInput): Games
  createAttendeesGames(input: CreateAttendeesGamesInput!, condition: ModelAttendeesGamesConditionInput): AttendeesGames
  updateAttendeesGames(input: UpdateAttendeesGamesInput!, condition: ModelAttendeesGamesConditionInput): AttendeesGames
  deleteAttendeesGames(input: DeleteAttendeesGamesInput!, condition: ModelAttendeesGamesConditionInput): AttendeesGames
}

input ModelSubscriptionAttendeesFilterInput {
  id: ModelSubscriptionIDInput
  attendeeNo: ModelSubscriptionIntInput
  attendeeFirstName: ModelSubscriptionStringInput
  attendeeLastName: ModelSubscriptionStringInput
  attendeeContact: ModelSubscriptionStringInput
  registrationTimestamp: ModelSubscriptionIntInput
  and: [ModelSubscriptionAttendeesFilterInput]
  or: [ModelSubscriptionAttendeesFilterInput]
}

type Subscription {
  onCreateAttendees(filter: ModelSubscriptionAttendeesFilterInput): Attendees @aws_subscribe(mutations: ["createAttendees"])
  onUpdateAttendees(filter: ModelSubscriptionAttendeesFilterInput): Attendees @aws_subscribe(mutations: ["updateAttendees"])
  onDeleteAttendees(filter: ModelSubscriptionAttendeesFilterInput): Attendees @aws_subscribe(mutations: ["deleteAttendees"])
  onCreateGames(filter: ModelSubscriptionGamesFilterInput): Games @aws_subscribe(mutations: ["createGames"])
  onUpdateGames(filter: ModelSubscriptionGamesFilterInput): Games @aws_subscribe(mutations: ["updateGames"])
  onDeleteGames(filter: ModelSubscriptionGamesFilterInput): Games @aws_subscribe(mutations: ["deleteGames"])
  onCreateAttendeesGames(filter: ModelSubscriptionAttendeesGamesFilterInput): AttendeesGames @aws_subscribe(mutations: ["createAttendeesGames"])
  onUpdateAttendeesGames(filter: ModelSubscriptionAttendeesGamesFilterInput): AttendeesGames @aws_subscribe(mutations: ["updateAttendeesGames"])
  onDeleteAttendeesGames(filter: ModelSubscriptionAttendeesGamesFilterInput): AttendeesGames @aws_subscribe(mutations: ["deleteAttendeesGames"])
}

type ModelGamesConnection {
  items: [Games]!
  nextToken: String
}

input ModelGamesFilterInput {
  id: ModelIDInput
  gameName: ModelStringInput
  gameLocation: ModelStringInput
  gameTimestamp: ModelIntInput
  gamePlayersCount: ModelIntInput
  and: [ModelGamesFilterInput]
  or: [ModelGamesFilterInput]
  not: ModelGamesFilterInput
}

input ModelGamesConditionInput {
  gameName: ModelStringInput
  gameLocation: ModelStringInput
  gameTimestamp: ModelIntInput
  gamePlayersCount: ModelIntInput
  and: [ModelGamesConditionInput]
  or: [ModelGamesConditionInput]
  not: ModelGamesConditionInput
}

input CreateGamesInput {
  id: ID
  gameName: String!
  gameLocation: String!
  gameTimestamp: AWSTimestamp!
  gamePlayersCount: Int!
}

input UpdateGamesInput {
  id: ID!
  gameName: String
  gameLocation: String
  gameTimestamp: AWSTimestamp
  gamePlayersCount: Int
}

input DeleteGamesInput {
  id: ID!
}

input ModelSubscriptionGamesFilterInput {
  id: ModelSubscriptionIDInput
  gameName: ModelSubscriptionStringInput
  gameLocation: ModelSubscriptionStringInput
  gameTimestamp: ModelSubscriptionIntInput
  gamePlayersCount: ModelSubscriptionIntInput
  and: [ModelSubscriptionGamesFilterInput]
  or: [ModelSubscriptionGamesFilterInput]
}

type ModelAttendeesGamesConnection {
  items: [AttendeesGames]!
  nextToken: String
}

input ModelAttendeesGamesFilterInput {
  id: ModelIDInput
  attendeesId: ModelIDInput
  gamesId: ModelIDInput
  and: [ModelAttendeesGamesFilterInput]
  or: [ModelAttendeesGamesFilterInput]
  not: ModelAttendeesGamesFilterInput
}

input ModelAttendeesGamesConditionInput {
  attendeesId: ModelIDInput
  gamesId: ModelIDInput
  and: [ModelAttendeesGamesConditionInput]
  or: [ModelAttendeesGamesConditionInput]
  not: ModelAttendeesGamesConditionInput
}

input CreateAttendeesGamesInput {
  id: ID
  attendeesId: ID!
  gamesId: ID!
}

input UpdateAttendeesGamesInput {
  id: ID!
  attendeesId: ID
  gamesId: ID
}

input DeleteAttendeesGamesInput {
  id: ID!
}

input ModelSubscriptionAttendeesGamesFilterInput {
  id: ModelSubscriptionIDInput
  attendeesId: ModelSubscriptionIDInput
  gamesId: ModelSubscriptionIDInput
  and: [ModelSubscriptionAttendeesGamesFilterInput]
  or: [ModelSubscriptionAttendeesGamesFilterInput]
}
